/*
 *  HTNeuronModule.cpp
 */

#include "htneuronmodule.h"

// Generated includes:
#include "config.h"

// include headers with your own stuff
#include "ht_neuron_minis_GABA_B1a_soft_gap_noprelimspike_mGluR.h"

// Includes from nestkernel:
#include "connection_manager_impl.h"
#include "connector_model_impl.h"
#include "dynamicloader.h"
#include "exceptions.h"
#include "genericmodel.h"
#include "genericmodel_impl.h"
#include "kernel_manager.h"
#include "model.h"
#include "model_manager_impl.h"
#include "nestmodule.h"
#include "target_identifier.h"

// Includes from sli:
#include "booldatum.h"
#include "integerdatum.h"
#include "sliexceptions.h"
#include "tokenarray.h"

// -- Interface to dynamic module loader ---------------------------------------

/*
 * There are three scenarios, in which HTNeuronModule can be loaded by NEST:
 *
 * 1) When loading your module with `Install`, the dynamic module loader must
 * be able to find your module. You make the module known to the loader by
 * defining an instance of your module class in global scope. (LTX_MODULE is
 * defined) This instance must have the name
 *
 * <modulename>_LTX_mod
 *
 * The dynamicloader can then load modulename and search for symbol "mod" in it.
 *
 * 2) When you link the library dynamically with NEST during compilation, a new
 * object has to be created. In the constructor the DynamicLoaderModule will
 * register your module. (LINKED_MODULE is defined)
 *
 * 3) When you link the library statically with NEST during compilation, the
 * registration will take place in the file `static_modules.h`, which is
 * generated by cmake.
 */
#if defined( LTX_MODULE ) | defined( LINKED_MODULE )
mynest::HTNeuronModule htneuronmodule_LTX_mod;
#endif
// -- DynModule functions ------------------------------------------------------

mynest::HTNeuronModule::HTNeuronModule()
{
#ifdef LINKED_MODULE
  // register this module at the dynamic loader
  // this is needed to allow for linking in this module at compile time
  // all registered modules will be initialized by the main app's dynamic loader
  nest::DynamicLoaderModule::registerLinkedModule( this );
#endif
}

mynest::HTNeuronModule::~HTNeuronModule()
{
}

const std::string
mynest::HTNeuronModule::name( void ) const
{
  return std::string( "HTNeuronModule" ); // Return name of the module
}

const std::string
mynest::HTNeuronModule::commandstring( void ) const
{
  // Instruct the interpreter to load htneuronmodule-init.sli
  return std::string( "(htneuronmodule-init) run" );
}

//-------------------------------------------------------------------------------------

void
mynest::HTNeuronModule::init( SLIInterpreter* i )
{
  /* Register a neuron or device model.
     Give node type as template argument and the name as second argument.
  */
  nest::kernel().model_manager.register_node_model< ht_neuron_minis_GABA_B1a_soft_gap_noprelimspike_mGluR >(
    "ht_neuron_minis_GABA_B1a_soft_gap_noprelimspike_mGluR" );
} // HTNeuronModule::init()
